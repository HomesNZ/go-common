// Code generated by MockGen. DO NOT EDIT.
// Source: event_sender.go
//
// Generated by this command:
//
//	mockgen -source=event_sender.go -destination=mock/event_sender.go
//

// Package mock_sqs is a generated GoMock package.
package mock_sqs

import (
	reflect "reflect"

	sqs "github.com/HomesNZ/go-common/sqs"
	gomock "go.uber.org/mock/gomock"
)

// MockEventSender is a mock of EventSender interface.
type MockEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockEventSenderMockRecorder
}

// MockEventSenderMockRecorder is the mock recorder for MockEventSender.
type MockEventSenderMockRecorder struct {
	mock *MockEventSender
}

// NewMockEventSender creates a new mock instance.
func NewMockEventSender(ctrl *gomock.Controller) *MockEventSender {
	mock := &MockEventSender{ctrl: ctrl}
	mock.recorder = &MockEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSender) EXPECT() *MockEventSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEventSender) Send(ev sqs.EventTyper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEventSenderMockRecorder) Send(ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEventSender)(nil).Send), ev)
}
