// Code generated by MockGen. DO NOT EDIT.
// Source: s3_presign.go

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPresignService is a mock of PresignService interface.
type MockPresignService struct {
	ctrl     *gomock.Controller
	recorder *MockPresignServiceMockRecorder
}

// MockPresignServiceMockRecorder is the mock recorder for MockPresignService.
type MockPresignServiceMockRecorder struct {
	mock *MockPresignService
}

// NewMockPresignService creates a new mock instance.
func NewMockPresignService(ctrl *gomock.Controller) *MockPresignService {
	mock := &MockPresignService{ctrl: ctrl}
	mock.recorder = &MockPresignServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresignService) EXPECT() *MockPresignServiceMockRecorder {
	return m.recorder
}

// SignedPutObjectUrl mocks base method.
func (m *MockPresignService) SignedPutObjectUrl(ctx context.Context, bucket, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedPutObjectUrl", ctx, bucket, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedPutObjectUrl indicates an expected call of SignedPutObjectUrl.
func (mr *MockPresignServiceMockRecorder) SignedPutObjectUrl(ctx, bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedPutObjectUrl", reflect.TypeOf((*MockPresignService)(nil).SignedPutObjectUrl), ctx, bucket, key)
}
